
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from "@/hooks/use-toast";

// Default to empty strings - will be populated by the edge function
let SUPABASE_URL = "";
let SUPABASE_PUBLISHABLE_KEY = "";

// Create Supabase client with dynamic configuration
export const createSupabaseClient = async () => {
  try {
    // Fetch configuration from edge function
    const response = await fetch('https://gsvyxsddmddipeoduyys.supabase.co/functions/v1/get-config', {
      headers: {
        'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imdzdnl4c2RkbWRkaXBlb2R1eXlzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY1NjI0NDMsImV4cCI6MjA2MjEzODQ0M30.5D42pv74UQ9crKIKKV78sTeQOSH8yW4_HtRuKU2wuBk'
      }
    });
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      console.error("Config fetch error:", response.status, response.statusText, errorData);
      throw new Error(`Failed to fetch config: ${response.statusText}${errorData.error ? ` - ${errorData.error}` : ''}`);
    }
    
    const config = await response.json();
    console.log("Config loaded successfully");
    SUPABASE_URL = config.supabaseUrl;
    SUPABASE_PUBLISHABLE_KEY = config.supabaseAnonKey;
    
    return createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
      auth: {
        persistSession: true,
        autoRefreshToken: true,
        storage: localStorage,
        storageKey: 'aafairshare-auth',
        detectSessionInUrl: false,
        flowType: 'implicit'
      },
      global: {
        headers: {
          'Content-Type': 'application/json',
        },
        fetch: (url, options) => {
          return fetch(url, {
            ...options,
            signal: options?.signal || AbortSignal.timeout(30000)
          }).catch(error => {
            console.error("Fetch error:", error);
            throw error;
          });
        }
      },
      realtime: {
        heartbeatIntervalMs: 30000
      }
    });
  } catch (error) {
    console.error("Error initializing Supabase client:", error);
    toast({
      title: "Connection Error",
      description: "Failed to initialize database connection. Please try again later.",
      variant: "destructive"
    });
    throw error;
  }
};

// Initialize client
let supabaseClientPromise: Promise<ReturnType<typeof createClient<Database>>> | null = null;

// Lazy-loaded Supabase client - only initialize when first needed
export const getSupabase = async () => {
  if (!supabaseClientPromise) {
    supabaseClientPromise = createSupabaseClient();
  }
  return supabaseClientPromise;
};

// Create a direct client instance for non-async contexts
// This is a temporary client for backward compatibility
export const supabase = createClient<Database>(
  SUPABASE_URL || "https://gsvyxsddmddipeoduyys.supabase.co",
  SUPABASE_PUBLISHABLE_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imdzdnl4c2RkbWRkaXBlb2R1eXlzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY1NjI0NDMsImV4cCI6MjA2MjEzODQ0M30.5D42pv74UQ9crKIKKV78sTeQOSH8yW4_HtRuKU2wuBk",
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      storage: localStorage
    }
  }
);

// Helper to check network connection
export const isOnline = () => typeof navigator !== 'undefined' && navigator.onLine;

// Clean up auth state utility - export directly from the client file
export const cleanupAuthState = (): void => {
  console.log("Cleaning up auth state");
  
  // Remove standard auth tokens
  localStorage.removeItem('supabase.auth.token');
  
  // Remove all Supabase auth keys from localStorage
  Object.keys(localStorage).forEach((key) => {
    if (key.startsWith('supabase.auth.') || key.includes('sb-') || key.includes('aafairshare-auth')) {
      console.log(`Removing localStorage item: ${key}`);
      localStorage.removeItem(key);
    }
  });
  
  // Do the same for sessionStorage
  try {
    if (typeof sessionStorage !== 'undefined') {
      Object.keys(sessionStorage).forEach((key) => {
        if (key.startsWith('supabase.auth.') || key.includes('sb-') || key.includes('aafairshare-auth')) {
          console.log(`Removing sessionStorage item: ${key}`);
          sessionStorage.removeItem(key);
        }
      });
    }
  } catch (e) {
    console.error("Error cleaning sessionStorage:", e);
  }
  
  // Also remove project-specific error markers
  localStorage.removeItem('auth-error-detected');
};

// Function to check Supabase availability with retry
export const checkSupabaseConnection = async (retries = 2): Promise<boolean> => {
  let attempt = 0;
  
  while (attempt <= retries) {
    try {
      // Get a client first
      const client = await getSupabase();
      
      // Simple check with getSession to verify if we can connect to Supabase
      const { data, error } = await client.auth.getSession();
      
      // If we can reach Supabase, consider it a successful connection
      return !error;
    } catch (e) {
      console.error(`Error checking Supabase connection (attempt ${attempt + 1}):`, e);
      attempt++;
      
      // Only wait between retries, not after the last one
      if (attempt <= retries) {
        await new Promise(resolve => setTimeout(resolve, 1500 * attempt));
      }
    }
  }
  
  return false;
};

// Function to try force signout (ignores errors)
export const forceSignOut = async (): Promise<void> => {
  try {
    const client = await getSupabase();
    await client.auth.signOut({ scope: 'global' });
    console.log("Successfully signed out from Supabase");
  } catch (err) {
    console.error("Error during signOut:", err);
    // Continue even if this fails
  }
};
