
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://gsvyxsddmddipeoduyys.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imdzdnl4c2RkbWRkaXBlb2R1eXlzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY1NjI0NDMsImV4cCI6MjA2MjEzODQ0M30.5D42pv74UQ9crKIKKV78sTeQOSH8yW4_HtRuKU2wuBk";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storage: localStorage,
    storageKey: 'aafairshare-auth', // Use a unique key to prevent conflicts
    detectSessionInUrl: true
  },
  global: {
    headers: {
      'Content-Type': 'application/json',
    },
    // Add retry configuration
    fetch: (url, options) => {
      // Default fetch implementation with retry logic
      return fetch(url, {
        ...options,
        // Increase timeout for better reliability
        signal: options?.signal || AbortSignal.timeout(30000)
      }).catch(error => {
        console.error("Fetch error:", error);
        throw error;
      });
    }
  },
  realtime: {
    heartbeatIntervalMs: 20000 // More aggressive heartbeating
  }
});

// Helper to check network connection
export const isOnline = () => typeof navigator !== 'undefined' && navigator.onLine;

// Function to check Supabase availability with retry
export const checkSupabaseConnection = async (retries = 2): Promise<boolean> => {
  let attempt = 0;
  
  while (attempt <= retries) {
    try {
      // Simple check with getSession to verify if we can connect to Supabase
      const { data, error } = await supabase.auth.getSession();
      
      // If we can reach Supabase, consider it a successful connection
      return !error;
    } catch (e) {
      console.error(`Error checking Supabase connection (attempt ${attempt + 1}):`, e);
      attempt++;
      
      // Only wait between retries, not after the last one
      if (attempt <= retries) {
        await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
      }
    }
  }
  
  return false;
};
