
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://gsvyxsddmddipeoduyys.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imdzdnl4c2RkbWRkaXBlb2R1eXlzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY1NjI0NDMsImV4cCI6MjA2MjEzODQ0M30.5D42pv74UQ9crKIKKV78sTeQOSH8yW4_HtRuKU2wuBk";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storage: localStorage,
    storageKey: 'aafairshare-auth', // Use a unique key to prevent conflicts
    detectSessionInUrl: true
  },
  global: {
    headers: {
      'Content-Type': 'application/json',
    },
    fetch: undefined // Use default fetch with automatic retries
  },
  realtime: {
    heartbeatIntervalMs: 20000 // More aggressive heartbeating
  }
});

// Helper to check network connection
export const isOnline = () => typeof navigator !== 'undefined' && navigator.onLine;

// Function to check Supabase availability
export const checkSupabaseConnection = async (): Promise<boolean> => {
  try {
    // Fix: Add proper type annotation for the RPC function
    // This tells TypeScript that the heartbeat function returns a string
    const { data, error } = await supabase.rpc<string>('heartbeat');
    
    // Simple check if we got a response and no error
    return !error && data === 'pong';
  } catch (e) {
    console.error("Error checking Supabase connection:", e);
    return false;
  }
};
