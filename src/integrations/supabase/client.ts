
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { showToast } from '@/components/ui/use-toast';

const SUPABASE_URL = "https://gsvyxsddmddipeoduyys.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imdzdnl4c2RkbWRkaXBlb2R1eXlzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY1NjI0NDMsImV4cCI6MjA2MjEzODQ0M30.5D42pv74UQ9crKIKKV78sTeQOSH8yW4_HtRuKU2wuBk";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storage: localStorage,
    storageKey: 'aafairshare-auth', // Use a unique key to prevent conflicts
    detectSessionInUrl: false, // Change to false to prevent URL parsing issues
    flowType: 'implicit' // Use implicit flow for more reliable session handling
  },
  global: {
    headers: {
      'Content-Type': 'application/json',
    },
    // Add retry configuration with longer timeout
    fetch: (url, options) => {
      // Default fetch implementation with retry logic
      return fetch(url, {
        ...options,
        // Increase timeout for better reliability
        signal: options?.signal || AbortSignal.timeout(30000) // 30 seconds timeout (increased from 20s)
      }).catch(error => {
        console.error("Fetch error:", error);
        throw error;
      });
    }
  },
  realtime: {
    heartbeatIntervalMs: 30000 // More regular heartbeating (increased from 20s)
  }
});

// Helper to check network connection
export const isOnline = () => typeof navigator !== 'undefined' && navigator.onLine;

// Clean up auth state utility - export directly from the client file
export const cleanupAuthState = (): void => {
  console.log("Cleaning up auth state");
  
  // Remove standard auth tokens
  localStorage.removeItem('supabase.auth.token');
  
  // Remove all Supabase auth keys from localStorage
  Object.keys(localStorage).forEach((key) => {
    if (key.startsWith('supabase.auth.') || key.includes('sb-') || key.includes('aafairshare-auth')) {
      console.log(`Removing localStorage item: ${key}`);
      localStorage.removeItem(key);
    }
  });
  
  // Do the same for sessionStorage
  try {
    if (typeof sessionStorage !== 'undefined') {
      Object.keys(sessionStorage).forEach((key) => {
        if (key.startsWith('supabase.auth.') || key.includes('sb-') || key.includes('aafairshare-auth')) {
          console.log(`Removing sessionStorage item: ${key}`);
          sessionStorage.removeItem(key);
        }
      });
    }
  } catch (e) {
    console.error("Error cleaning sessionStorage:", e);
  }
  
  // Also remove project-specific error markers
  localStorage.removeItem('auth-error-detected');
};

// Function to check Supabase availability with retry
export const checkSupabaseConnection = async (retries = 2): Promise<boolean> => {
  let attempt = 0;
  
  while (attempt <= retries) {
    try {
      // Simple check with getSession to verify if we can connect to Supabase
      const { data, error } = await supabase.auth.getSession();
      
      // If we can reach Supabase, consider it a successful connection
      return !error;
    } catch (e) {
      console.error(`Error checking Supabase connection (attempt ${attempt + 1}):`, e);
      attempt++;
      
      // Only wait between retries, not after the last one
      if (attempt <= retries) {
        await new Promise(resolve => setTimeout(resolve, 1500 * attempt));
      }
    }
  }
  
  return false;
};

// Function to try force signout (ignores errors)
export const forceSignOut = async (): Promise<void> => {
  try {
    await supabase.auth.signOut({ scope: 'global' });
    console.log("Successfully signed out from Supabase");
  } catch (err) {
    console.error("Error during signOut:", err);
    // Continue even if this fails
  }
};
