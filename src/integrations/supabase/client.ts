// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from "@/hooks/use-toast";

// Default to project URL without keys - will be updated by fetching from edge function
let SUPABASE_URL = "https://gsvyxsddmddipeoduyys.supabase.co";
let SUPABASE_PUBLISHABLE_KEY = "";

// Create Supabase client with dynamic configuration
export const createSupabaseClient = async () => {
  try {
    // Fetch configuration from edge function
    console.log("[SupabaseClient] Fetching Supabase configuration from edge function...");
    
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 seconds timeout

    let response;
    try {
      response = await fetch('https://gsvyxsddmddipeoduyys.supabase.co/functions/v1/get-config', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        },
        signal: controller.signal
      });
    } catch (fetchError) {
      clearTimeout(timeoutId);
      if (fetchError instanceof Error && fetchError.name === 'AbortError') {
        console.error("[SupabaseClient] Config fetch timed out after 15 seconds.");
        throw new Error("Failed to get configuration: Request timed out.");
      } else {
        console.error("[SupabaseClient] Config fetch failed with network error:", fetchError);
        throw new Error(`Failed to get configuration: Network error during fetch. ${fetchError instanceof Error ? fetchError.message : String(fetchError)}`);
      }
    }

    clearTimeout(timeoutId);
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ message: 'Failed to parse error response' }));
      console.error("[SupabaseClient] Config fetch error - Status:", response.status, response.statusText, "Response Data:", errorData);
      throw new Error(`Failed to get configuration: ${response.status} ${response.statusText}. ${errorData.message || ''}`);
    }
    
    const config = await response.json();
    console.log("[SupabaseClient] Config loaded successfully:", config);
    
    // Only update URL if provided (otherwise keep default)
    if (config.supabaseUrl) {
      SUPABASE_URL = config.supabaseUrl;
    }
    
    SUPABASE_PUBLISHABLE_KEY = config.supabaseAnonKey;
    
    if (!SUPABASE_PUBLISHABLE_KEY) {
      console.error("[SupabaseClient] No Supabase anon key received from config.");
      throw new Error("Failed to initialize Supabase client: No authentication key received from config.");
    }
    
    console.log("[SupabaseClient] Creating Supabase client with URL:", SUPABASE_URL);
    
    return createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
      auth: {
        persistSession: true,
        autoRefreshToken: true,
        storage: localStorage,
        storageKey: 'aafairshare-auth',
        detectSessionInUrl: false,
        flowType: 'implicit'
      },
      global: {
        headers: {
          'Content-Type': 'application/json',
        },
        fetch: (url, options) => {
          return fetch(url, {
            ...options,
            signal: options?.signal || AbortSignal.timeout(30000)
          }).catch(error => {
            console.error("Fetch error:", error);
            throw error;
          });
        }
      },
      realtime: {
        heartbeatIntervalMs: 30000
      }
    });
  } catch (error) {
    console.error("[SupabaseClient] Error initializing Supabase client:", error);
    toast({
      title: "Connection Error",
      description: (error instanceof Error && error.message) ? error.message : "Failed to initialize database connection. Please try again later.",
      variant: "destructive"
    });
    throw error;
  }
};

// Initialize client
let supabaseClientPromise: Promise<ReturnType<typeof createClient<Database>>> | null = null;

// Lazy-loaded Supabase client - only initialize when first needed
export const getSupabase = async () => {
  if (!supabaseClientPromise) {
    supabaseClientPromise = createSupabaseClient();
  }
  return supabaseClientPromise;
};

// Create a temporary client instance for non-async contexts
// This will get replaced once the proper configuration is loaded
export const supabase = createClient<Database>(
  SUPABASE_URL,
  "placeholder-key-will-be-replaced",  // Use a placeholder key to prevent immediate errors
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      storage: localStorage
    }
  }
);

// Helper to check network connection
export const isOnline = () => typeof navigator !== 'undefined' && navigator.onLine;

// Clean up auth state utility - export directly from the client file
export const cleanupAuthState = (): void => {
  console.log("Cleaning up auth state");
  
  // Remove standard auth tokens
  localStorage.removeItem('supabase.auth.token');
  
  // Remove all Supabase auth keys from localStorage
  Object.keys(localStorage).forEach((key) => {
    if (key.startsWith('supabase.auth.') || key.includes('sb-') || key.includes('aafairshare-auth')) {
      console.log(`Removing localStorage item: ${key}`);
      localStorage.removeItem(key);
    }
  });
  
  // Do the same for sessionStorage
  try {
    if (typeof sessionStorage !== 'undefined') {
      Object.keys(sessionStorage).forEach((key) => {
        if (key.startsWith('supabase.auth.') || key.includes('sb-') || key.includes('aafairshare-auth')) {
          console.log(`Removing sessionStorage item: ${key}`);
          sessionStorage.removeItem(key);
        }
      });
    }
  } catch (e) {
    console.error("Error cleaning sessionStorage:", e);
  }
  
  // Also remove project-specific error markers
  localStorage.removeItem('auth-error-detected');
};

// Function to try force signout (ignores errors)
export const forceSignOut = async (): Promise<void> => {
  try {
    const client = await getSupabase();
    await client.auth.signOut({ scope: 'global' });
    console.log("Successfully signed out from Supabase");
  } catch (err) {
    console.error("Error during signOut:", err);
    // Continue even if this fails
  }
};

// Export checkSupabaseConnection from services to avoid duplication
export { checkSupabaseConnection } from '@/services/api/auth/authUtilities';
